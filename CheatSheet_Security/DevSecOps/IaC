IaC = Infrastructure as Code

An IaC approach can make it possible to have a reliable infrastructure that is scalable, 
versionable, and repeatable.


It supports key concepts :
    Continuous Integration :
        Infrastructure development to be a collaborative process with versioning 
        in place.
    Continuous Deployment :
        Allowing for the automation of infrastructure deployment across multiple 
        environments consistently.

Declarative vs. Imperative :
    Declarative :
        It focuses on the what rather than the how.
        This involves declaring an explicit desired state for your infrastructure.
        A state file is kept to ensure your infrastructureâ€™s current state matches the desired state.
    Imperative :
        This approach involves defining specific commands to be run to achieve the desired state

Agent-based vs. Agentless :
    Agent-based :
        Some agent-based IaC tools: Puppet, Chef, and Saltstack.
    Agentless :
        Agentless IaC tools: Terraform, AWS CloudFormation, Pulumi and Ansible.

Immutable vs. Mutable Infrastructure :
    Immutable :
        Updates are made on a separate new infra and they deployed.
        ( update an application from version 1 to version 2 )
    Mutable :
        Updates are made in place 
        ( a critical database system that requires regular maintenance updates and patching )
    
Provisioning vs. Configuration Management :
    Provisioning :
        Terraform, AWS CloudFormation, Google Cloud Deployment Manager, Pulumi
    Configuration management :
        Ansible, Chef, Puppet, Saltstack

The Continual (Best Practice) Phases :
    (ensure best practices throughout infrastructure development and management)
    Version Control
    Collaboration
    Monitoring/Maintenance
    Rollback
    Review + Change

The Repeatable (Infra Creation + Config) Phases :
    (provide guidance during the development or configuration of an infrastructure)
    Design
    Define
    Test
    Provision 
    Configure










