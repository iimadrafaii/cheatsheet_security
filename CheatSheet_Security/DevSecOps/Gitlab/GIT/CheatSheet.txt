VCS = Version Control Systems

All data are stored in .git

Staging is the “pre-commit” state in git

Git data storage :
        When a file hash is 345e6aef713208c8d50cdea23b85e6ad831f0449
        Git stores every version of a file as a blob
        The two chars from the front (34) are used as a directory
        ==> stored at .git/objects/34/5e6aef713208c8d50cdea23b85e6ad831f0449
        To see the content of a git blob :
                git cat-file blob 345e6aef713208c8d50cdea23b85e6ad831f0449
        The blob, tree, and commits are how Git stores the complete history of your repository. 
        It does all the references by the object hash: there is no way of manipulating the history 
        or files tracked in the repository without breaking the relations.

Clone a repo :
        git clone <repository_url>

Specify a branch to clone :
        git clone -branch name_of_branch <repository_url>

Git branches are lightweight, making branching operations fast and switching between branches quickly.

Branching :
        Update remote-tracking branches : git fetch
        List both local and remote branches : git branch -a
        List remote branches : git branch -r

Adding code : git add <filename> ( This tells Git to include the changes made to the file in the next commit )
Commit : git commit -m "commit message"
Push : git push <branch name>

origin : refer to the original repository we cloned from

Recommendations :
        Ensure that credentials follow the principle of least privilege from code to deployment.
        Avoid sharing the same credentials across multiple contexts to maintain accountability 
        and simplify privilege management.
        Use temporary credentials whenever possible, and establish procedures to rotate static 
        credentials and detect stale credentials periodically.
        Ensure credentials are only used under predefined conditions, such as limiting usage 
        to a specific IP address or identity.
        Detect secrets pushed to and stored in code repositories using Integrated Development 
        Environments (IDE) plugins, automatic scanning, and periodic repository commit scans.
        Use built-in vendor options or third-party tools to prevent secrets from being printed 
        to console outputs during builds and ensure existing outputs do not contain secrets.
        Verify that secrets are removed from artifacts, such as container image layers and binaries.


Environment Variables and Best Practices :
        Avoid hardcoding sensitive information in code; use environment variables instead.
        Regularly review and rotate credentials stored in environment variables.
        Limit access to environment variables to authorized personnel only.
        Environment variables should be set according to the principle of least privilege.
        Implement monitoring and auditing mechanisms to track changes to environment variables.
        If implementing a secrets manager solution (explained in the next task), review its encryption 
        mechanisms and if it's a good fit for your development environments.

Secret management is needed to keep source code secure besides environment variables 
( For ex : adding secrets in GITLAB : to Settings/'CI/CD'/Variables and make them protected )















---------------------------------------------------------------------------------------------------------
