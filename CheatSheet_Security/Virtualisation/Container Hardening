Protecting the Docker Daemon :
        Interact with remote Daemon using SSH and creating contexts in docker :
                docker context create --docker host=ssh://myuser@remotehost --description="Development Environment" development-environment-host 
        ==> Switch to the newly created context : 
                docker context use development-environment-host
        Exit current docker context : 
                docker context use default


Implementing Control Groups :
        Control Groups (also known as cgroups) are a feature of the Linux kernel that facilitates 
        restricting and prioritising the number of system resources a process can utilise.

        ( this helps prevent faulty or malicious containers from exhausting a system )

        Setting CPUs limits : in core counts 
                docker run -it --cpus="1" mycontainer

        View information about a container : ( 0 means no limits !)
                docker inspect containername 


Preventing "Over-Privileged" Containers :
        Capabilities :
                CAP_NET_BIND_SERVICE : 
                        This capability allows services to bind to ports, specifically 
                        those under 1024, which usually requires root privileges.
                CAP_SYS_ADMIN :
                        This capability provides a variety of administrative privileges, 
                        including being able to mount/unmount file systems, changing network 
                        settings, performing system reboots, shutdowns, and more.
                CAP_SYS_RESOURCE : 
                        This capability allows a process to modify the maximum limit of resources 
                        available. For example, a process can use more memory or bandwidth.

        Determine what capabilities are assigned to a process :
                capsh --print


Seccomp & AppArmor :
        Seccomp : A linux security guard ( allows to do or not to do ) 
                Apply a Seccomp profile :
                        docker run --rm -it --security-opt seccomp=.../profile.json mycontainer
                It will be included in the application.
        
        AppArmor :
                It is included in the OS.
                Determines the actions a process can execute based on a set of rules at the operating system level.

                Checking if AppArmor is installed or not :
                        sudo aa-status

                Importing our AppArmor profile into AppArmor :
                        sudo apparmor_parser -r -W /.../profile.json

                Applying our AppArmor profile when running a container :
                        docker run --rm -it --security-opt apparmor=/.../profile.json mycontainer

        The difference betweeb Seccomp and AppArmor :
                AppArmor determines what resources an application can access (i.e., CPU, RAM, Network 
                interface, filesystem, etc) and what actions it can take on those resources.

                Seccomp is within the program itself, which restricts what system calls the process 
                can make (i.e. what parts of the CPU and operating system functions).

        
Reviewing Docker Images :
        Review source code when pulling from docker hub 
        
        Tools such as Dive allow you to reverse engineer Docker images by inspecting what is executed 
        and changed at each layer of the image during the build process.


Compliance & Benchmarking :
        Compliance frameworks :
                NIST SP 800-190
                ISO 27001
        
        Benchmarking :
                A process used to see how well an organisation is adhering to best practices. 
                Benchmarking allows an organisation to see where they are following best practices 
                well and where further improvements are needed :
                        CIS Docker Benchmark
                        OpenSCAP
                        Docker Scout
                        Anchore
                        Grype




























