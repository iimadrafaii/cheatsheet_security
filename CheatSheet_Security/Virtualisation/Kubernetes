Architecture :
        Pod : a group of one or more containers
        Nodes : 
                Two types : control plane (master node) VS worker nodes
                Pods run on nodes
        Cluster : a set of nodes


The Kubernetes Control Plane :
        Kube-apiserver : The API server is the front end of the control plane
        Etcd : a key/value store containing cluster data / the current state of the cluster
        Kube-scheduler : catch any newly created pods that have yet to be assigned to a 
                         node and make sure it gets assigned to one
        Kube-controller-manager : running the controller processes like : 
                        node controller process : responsible for noticing when nodes go down
                        deployment controller process
        Cloud-controller-manager : enables communication between a Kubernetes cluster and a cloud provider API


Kubernetes Worker Node : 
        Kubelet : 
                runs on every node in the cluster
                responsible for ensuring containers are running and healthy in a pod
        Kube-proxy : 
                Responsible for network communication within the cluster
                Traffic won't hit a pod directly but instead hit something 
                called a Service (which would be associated with a group of pods), 
                and then gets directed to one of the associated pods
        Container runtime : 
                Docker, rkt or runC

Concepts :
        Namespaces
        ReplicaSet
        Deployments : Used to define a desired state
        StatefulSets 
        Services : ( like an access point to conserve the ip address of a pod for example )
                There are different types of services you can define: ClusterIP, LoadBalancer, 
                NodePort and ExternalName
        Ingress : acts as a single access point to the cluster
        

Configuration :
        apiVersion
        kind
        metadata
        spec


Kubectl :
        kubectl apply -f
        kubectl get -n NAMESPACE
        kubectl describe 
        kubectl logs


### Kubernetes Hardening :
## Container hardening :

# Secure your Pods :

Containers that run applications should not have root privileges

Containers should have an immutable filesystem, meaning they cannot be 
altered or added to (depending on the purpose of the container, this may not be possible) 

Container images should be frequently scanned for vulnerabilities or misconfigurations 

Privileged containers should be prevented  

Pod Security Standards and Pod Security Admission :
        https://kubernetes.io/docs/concepts/security/pod-security-standards/
        https://kubernetes.io/docs/concepts/security/pod-security-admission/
        Used to define security policies at 3 levels (privileged, baseline and restricted)
        Pod Security Admission enforces Pod Security Standards


# Hardening and Separation of your Network :

Access to the control plane node should be restricted using a firewall and 
role-based access control in an isolated network

Control plane components should communicate using Transport Layer Security 
(TLS) certificates

An explicit deny policy should be created

Credentials and sensitive information should not be stored as plain text in 
configuration files. Instead, they should be encrypted and in Kubernetes secrets


# Using Authentication and Authorisation Optimally :

Anonymous access should be disabled 

Strong user authentication should be used 

RBAC policies should be created for the various teams using 
the cluster and the service accounts utilised       


# Keeping an Eye Out :

Audit logging should be enabled 
A log monitoring and alerting system should be implemented


# Security Never Sleeps :

Security patches and updates should be applied quickly

Vulnerability scans and penetration tests should be done semi-regularly 

Any obsolete components in the cluster should be removed















